#!/usr/bin/perl -w

# $Id: LOG_Linux.module 579 2013-06-10 10:33:23Z marc@mguyard.com $

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../libs";
use ABT::Global;
use ABT::Modules;
use Getopt::Long;
use Pod::Usage;
use Switch;
use Net::OpenSSH;

###################
# Script Variable #
###################

my $module_device = "[LOGS] Linux";
my $module_description = "Module Linux (Backup by SSH)";
my $author = 'Marc GUYARD <m.guyard@orange.com>';
my $version = '0.1';

#####################
# Default arguments #
#####################

my $GenConfigFile;
my $ConfigFile;
my $show_help;
my $show_man;
my $default_retention = "370";

#############
# Functions #
#############

## Function who show the module short description
sub description {
	print $program."\n	".$module_device." - ".$module_description." (version : ".$version.").\n\n";
}

sub log_period {
	my $log_frequency = $_[0];
	switch ($log_frequency) {
		case "yesterday" { return 1; }
		case "last7days" { return 1; }
		case "last31days" { return 1; }
		else {
			$logger->error("The log period entered (".$log_frequency.") isn't valid (POSSIBLE : yesterday/last7days/last31days or all)");
			return 0;
		}
	}
}

## Function who generate a XML configuration file
sub generate {
	$logger->debug("[".$GenConfigFile."] Generating configuration file ") if $verbose;
	# Question function : 
	#	ARG1 : Question
	# 	ARG2 : Default Reply
	#	ARG3 : Reply is mandatory ? (1 => YES / 0 = NO)
	#	ARG4 : Function to verify the reply conformity
	my $device_ip_address = &questions("Please enter the Device IP to backup", "", "1", "verify_ip");
	my $device_description = &questions("Please enter the description of the device", "", "1", "");
	my $username = &questions("Please enter the device username", "root", "1", "");
	my $certificate = &questions("Please enter the SSH certificate (leave empty to use the default certificate)", "", "0", "");
	my $log_folder = &questions("Please enter the folder in which the logs are", "", "1", "");
	my $log_frequency = &questions("Please enter the log period you want to backup (yesterday/last7days/last31days) - case sensitive", "yesterday", "1", "main::log_period");
	my $log_pattern = &questions("Please enter a regex pattern of log ( ex. '.*http.*' )", "", "0", "");
	my $store_folder = &questions("Please specify the folder who store the backup", "", "1", "verify_folder");
	my $file_prefix = &questions("Please enter the backup file prefix (date automaticly add)", "", "1", "");
	switch ($log_frequency) {
		case "last7days" { $default_retention = "53"; }
		case "last31days" { $default_retention = "13"; }
	}
	my $retention = &questions("Please enter configuration retention in number of save backup (leave empty to use the default retention : ".$default_retention.")", "", "0", "verify_retention");
	my %XML = (
		'enable' => '1',
		'module' => $program,
		'date' => $date,
		'ip' => $device_ip_address,
		'description' => $device_description,
		'username' => $username,
		'certificate' => $certificate,
		'log-folder' => $log_folder,
		'log-frequency' => $log_frequency,
		'log-pattern' => $log_pattern,
		'store-folder' => $store_folder,
		'file-prefix' => $file_prefix,
		'retention' => $retention,
		); ## To Update with all information need
	my $Config = new XML::Simple (NoAttr=>1, NoSort => 1, KeepRoot => 1);
	my $Config_data = $Config->XMLout({config=>\%XML}, outputfile=>$GenConfigFile, NoAttr=>1);
	$logger->info("[".$GenConfigFile."] Configuration generation finish... ");
}

## Function who backup device
sub backup {
	$logger->debug("[".$ConfigFile."] Starting backuping configuration ") if $verbose;
	# Declare all configuration from the XML file
	my $config_parsing = &parse_config($ConfigFile);
	my $device_ip_address = $config_parsing->{'ip'};
	my $username = $config_parsing->{'username'};
	my $certificate = $config_parsing->{'certificate'};
	my $log_folder = $config_parsing->{'log-folder'};
	my $log_frequency = $config_parsing->{'log-frequency'};
	my $log_pattern = $config_parsing->{'log-pattern'};
	my $store_folder = $config_parsing->{'store-folder'};
	my $file_prefix = $config_parsing->{'file-prefix'};
	my $retention = $config_parsing->{'retention'};
	# Test if $retention is empty. If empty, use $default_retention
	$retention = $default_retention if ( $retention eq "" );
	my $configuration_filename = $store_folder."/".$file_prefix."_".$log_frequency."_".$date.".tgz";
	# Backup
	$Net::OpenSSH::debug = -1 if $verbose;
	my $ssh;
	if ( $certificate ) {
		$ssh = Net::OpenSSH->new($device_ip_address,
			user		=> $username,
			key_path	=> $certificate,
			kill_ssh_on_timeout => 1,
			timeout		=> 120,
		);
	} else {
		$ssh = Net::OpenSSH->new($device_ip_address,
			user		=> $username,
			kill_ssh_on_timeout => 1,
			timeout		=> 120,
		);
	}
	$ssh->error and &return_code(50, "Couldn't establish SSH connection : " . $ssh->error);
	# Generate backup
	my $stderr = 1;
	$stderr = 0 if $verbose;
	my $ctime;
	switch ($log_frequency) {
		case "yesterday" { $ctime = "1"; }
		case "last7days" { $ctime = "-7"; }
		case "last31days" { $default_retention = "-31"; }
	}
	my $regex = "";
	if ( $log_pattern ne "") {
		$regex = "-regex ".$log_pattern." ";
	}
	my $file2backup = $ssh->capture("find ".$log_folder."/ -daystart -ctime ".$ctime." -type f ".$regex." -printf '%p '");
	if (length($file2backup) != 0) {
		$ssh->system({ timeout => 3600, stderr_discard => $stderr }, "tar --ignore-failed-read -czf /var/tmp/backup.tgz ".$file2backup);
			$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
		# SCP download
		$ssh->scp_get({ timeout => 3600 }, '/var/tmp/backup.tgz', $configuration_filename);
			$ssh->error and &return_code(50, "SCP Configuration failed : " . $ssh->error);
		# Delete backup on device
		$ssh->system({ stderr_discard => $stderr }, "rm /var/tmp/backup.tgz");
			$ssh->error and &return_code(50, "Backup remove failed : " . $ssh->error);
		# Purge old backup
		&purge_files($retention, $store_folder, "^".$file_prefix."_.*");
	} else {
		$logger->warn("No files to backup");
	}
}

##########
# Script #
##########

# Check If arguments are present
if ( @ARGV > 0 ) {
	# Parse Arguments
	GetOptions( 	
		"d|description" => \&description,
		"c|config=s" => \$ConfigFile,
		"g|generate=s" => \$GenConfigFile,
		"v|verbose" => \$verbose,
		"q|quiet" => sub { $verbose = 0 },
		"man" => \$show_man,
		"h|help|?" => \$show_help 
	)
	# Show usage if no argument match
	or pod2usage({-message => "Argument unknown\n", -exitval => 1});
} else {
	# Show usage if no argument specified
	pod2usage({-message => "No argument specify\n", -exitval => 2});
}

# Show help usage
pod2usage(1) if $show_help;
# Show man usage
pod2usage(-verbose => 2) if $show_man;

# Call functions
&generate($GenConfigFile) if $GenConfigFile;
&backup($ConfigFile) if $ConfigFile;


__END__

=head1 NAME

ABTM - Another Backup Tool Module

=head1 AUTHOR

Script written by Marc GUYARD for Orange AIS <m.guyard@orange.com>.

=head1 VERSION

0.1 BETA PERL

=head1 SYNOPSIS

	Options:
		--description
			show the module description
		--config <configuration_file>
			use a configuration file specified
		--generate <configuration_file>
			generate a configuration file specified
		--verbose
			active script verbose
		--quiet
			active script quiet mode
		--man
			full documentation
		--help
			brief help message

=head1 OPTIONS

=over 8

=item B<--description>

Show the module description

=item B<--config>

Backup using a configuration file specify in argument.

=item B<--generate>

Generate a configuration file with the path and the name specify in argument.

=item B<--verbose>

Activate verbose mode. Should be used with another argument.

=item B<--quiet>

Activate quiet mode. Should be used with another argument.

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> is a module of ABT (Another Backup Tool).

=head1 RETURN CODE

	Return Code :


=cut