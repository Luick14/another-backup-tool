#!/usr/bin/perl -w

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../libs";
use ABT::Global;
use ABT::Modules;
use Getopt::Long;
use Pod::Usage;
use feature qw(switch);
use Net::Appliance::Session;

###################
# Script Variable #
###################

my $module_device = "[CONF] Juniper Security";
my $module_description = "Module Juniper Security for ScreenOS and JunOS (Backup by SSH or Telnet)";
my $author = 'Marc GUYARD <m.guyard@orange-ftgroup.com>; Luick <me@luick.fr>';
my $version = '0.2';

#####################
# Default arguments #
#####################

my $GenConfigFile;
my $ConfigFile;
my $show_help;
my $show_man;
my $default_retention = "15";

#############
# Functions #
#############

## Function which show the module short description
sub description {
	print $program."\n	".$module_device." - ".$module_description." (version : ".$version.").\n\n";
}

## Function which verify the Juniper OS
sub juniper_operating_system {
	my $juniper_os = uc $_[0];
	given($juniper_os) {
		when('SCREENOS') { return 1; }
		when('JUNOS') { return 1; }
		default {
	   		$logger->error("The Juniper OS entered (".$juniper_os.") isn't valid (SCREENOS/JUNOS)");
	   		return 0;
	   	}
	}
}

## Function which generate a XML configuration file
sub generate {
	$logger->debug("[".$GenConfigFile."] Generating configuration file ") if $verbose;
	# Question function :
	#	ARG1 : Question
	# 	ARG2 : Default Reply
	#	ARG3 : Reply is mandatory ? (1 => YES / 0 = NO)
	#	ARG4 : Function to verify the reply conformity
	my $operating_system = &questions("Please specify the OS (leave empty to use the default os)", "SCREENOS", "1", "main::juniper_operating_system");
	my $device_ip_address = &questions("Please enter the Device IP to backup", "", "1", "verify_ip");
	my $device_description = &questions("Please enter the description of the device", "", "1", "");
	my $transport = &questions("Connection by SSH or Telnet (case sensitive)", "SSH", "1", "ssh_or_telnet");
	my $username = &questions("Please enter the device username", "", "1", "");
	my $password = &questions("Please enter the device password", "", "1", "");
	my $store_folder = &questions("Please specify the folder which store the backup", "", "1", "verify_folder");
	my $file_prefix = &questions("Please enter the backup file prefix (date automaticly add)", "", "1", "");
	my $retention = &questions("Please enter configuration retention in number of save backup (leave empty to use the default retention : ".$default_retention.")", "", "0", "verify_retention");
	my %XML = (
		'enable' => '1',
		'module' => $program,
		'date' => $date,
		'operating-system' => $operating_system,
		'ip' => $device_ip_address,
		'description' => $device_description,
		'transport' => $transport,
		'username' => $username,
		'password' => $password,
		'store-folder' => $store_folder,
		'file-prefix' => $file_prefix,
		'retention' => $retention,
		); ## To Update with all information need
	my $Config = new XML::Simple (NoAttr=>1, NoSort => 1, KeepRoot => 1);
	my $Config_data = $Config->XMLout({config=>\%XML}, outputfile=>$GenConfigFile, NoAttr=>1);
	$logger->info("[".$GenConfigFile."] Configuration generation finish... ");
}

## Function which backup device
sub backup {
	$logger->debug("[".$ConfigFile."] Starting backuping configuration ") if $verbose;
	# Declare all configuration from the XML file
	my @configuration;
	my $backup_command;
	my $paging;
	my $save_after_backup;
	my $config_parsing = &parse_config($ConfigFile);
	my $operating_system = $config_parsing->{'operating-system'};
	my $device_ip_address = $config_parsing->{'ip'};
	my $transport = ($config_parsing->{'transport'} eq "") ? $config_parsing->{'transport'} : "SSH"; # Ternary test for backward compatibility (if option does not exists in XML, defaults to "SSH")
	my $username = $config_parsing->{'username'};
	my $password = $config_parsing->{'password'};
	my $store_folder = $config_parsing->{'store-folder'};
	my $file_prefix = $config_parsing->{'file-prefix'};
	my $retention = $config_parsing->{'retention'};
	# Test if $retention is empty. If empty, use $default_retention
	$retention = $default_retention if ( $retention eq "" );
	my $configuration_filename = $store_folder."/".$file_prefix."_".$date.".conf";
	# Backup
	my $session = Net::Appliance::Session->new({
		host            => $device_ip_address,
		transport       => $transport,
		connect_options => { username => $username, shkc => 0 },
		personality     => lc($operating_system),
		add_library     => $dirname."/../phrasebook",
	});
	eval {
		$session->set_global_log_at('debug') if $verbose;
		$session->do_paging(0); # Don't apply paging on connection
		$session->connect({username => $username, password => $password}); # Connection
		$session->macro('paging', { params => ['0'] }); # Disable paging -- More --
		given($operating_system) {
			when('SCREENOS') {
				$backup_command = "get config";
				$paging = "20";
				$save_after_backup = "1";
			}
			when('JUNOS') {
				$backup_command = "show configuration";
				$paging = "67";
				$save_after_backup = "0";
			}
		}
		@configuration = $session->cmd($backup_command);
		$session->macro('paging', { params => [$paging] }); # Enable paging -- More --
		$session->macro('save') if $save_after_backup; # Save the configuration by default
		$session->close;
		# Recuperation de la configuration précédente
		my $newest_configuration = &newest_file($store_folder, "^".$file_prefix."_.*");
		# Ecriture de la configuration actuelle
		open(CONFIG, '>>'.$configuration_filename);
		print CONFIG @configuration;
		close(CONFIG);
		if (defined($newest_configuration)) {
			# Diff de configuration
			if (&diff_file($ConfigFile, $newest_configuration, $configuration_filename)) {
				# La configuration existante et la configuration actuelle sont différentes
				$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") and last saved configuration (".$newest_configuration.") are different");
				$logger->info("[".$ConfigFile."] Configuration (".$configuration_filename.") is conserved");
			} else {
				# La configuration existante et la configuration actuelle sont identiques
				$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") and last saved configuration (".$newest_configuration.") are the same");
				$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") will be deleted");
				if ( -f $configuration_filename) {
					unlink($configuration_filename) or &return_code(50, "Failed to delete the configuration file (".$configuration_filename.") identical to ".$newest_configuration);
				}
			}
		} else {
			$logger->info("[".$ConfigFile."] No precedent configuration. Backup the actual configuration");
		}
	};
	if ( $@ ) {
		&return_code(50, "Error on backup for the configuration file ".$ConfigFile);
	}
	# Purge old backup
	&purge_files($retention, $store_folder, "^".$file_prefix."_.*");
}

##########
# Script #
##########

# Check If arguments are present
if ( @ARGV > 0 ) {
	# Parse Arguments
	GetOptions(
		"d|description" => \&description,
		"c|config=s" => \$ConfigFile,
		"g|generate=s" => \$GenConfigFile,
		"v|verbose" => \$verbose,
		"q|quiet" => sub { $verbose = 0 },
		"man" => \$show_man,
		"h|help|?" => \$show_help
	)
	# Show usage if no argument match
	or pod2usage({-message => "Argument unknown\n", -exitval => 1});
} else {
	# Show usage if no argument specified
	pod2usage({-message => "No argument specify\n", -exitval => 2});
}

# Show help usage
pod2usage(1) if $show_help;
# Show man usage
pod2usage(-verbose => 2) if $show_man;

# Call functions
&generate($GenConfigFile) if $GenConfigFile;
&backup($ConfigFile) if $ConfigFile;


__END__

=head1 NAME

ABTM - Another Backup Tool Module

=head1 AUTHOR

Script written by Marc GUYARD for Orange AIS <m.guyard@orange-ftgroup.com>.

=head1 VERSION

0.1 BETA PERL

=head1 SYNOPSIS

	Options:
		--description
			show the module description
		--config <configuration_file>
			use a configuration file specified
		--generate <configuration_file>
			generate a configuration file specified
		--verbose
			active script verbose
		--quiet
			active script quiet mode
		--man
			full documentation
		--help
			brief help message

=head1 OPTIONS

=over 8

=item B<--description>

Show the module description

=item B<--config>

Backup using a configuration file specify in argument.

=item B<--generate>

Generate a configuration file with the path and the name specify in argument.

=item B<--verbose>

Activate verbose mode. Should be used with another argument.

=item B<--quiet>

Activate quiet mode. Should be used with another argument.

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> is a module of ABT (Another Backup Tool).

=head1 RETURN CODE

	Return Code :


=cut
