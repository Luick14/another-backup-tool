#!/usr/bin/perl -w

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../libs";
use ABT::Global;
use ABT::Modules;
use Getopt::Long;
use feature qw(switch);
use Pod::Usage;
use Net::OpenSSH;
use WWW::Mechanize;
use Env qw(TERM);
use POSIX;

###################
# Script Variable #
###################

my $module_device = "[CONF] CheckPoint";
my $module_description = "Module CheckPoint (Backup by SSH or WebUI)";
my $author = 'Marc GUYARD <m.guyard@orange.com>';
my $version = '0.1';

#####################
# Default arguments #
#####################

my $GenConfigFile;
my $ConfigFile;
my $show_help;
my $show_man;
my $default_retention = "5";
my $default_scp_timeout = "10800";

#############
# Functions #
#############

## Function who show the module short description
sub description {
	print $program."\n	".$module_device." - ".$module_description." (version : ".$version.").\n\n";
}

# Function who verify the CheckPoint OS
sub checkpoint_operating_system {
	my $checkpoint_os = uc $_[0];
	given($checkpoint_os) {
		when('SPLAT') { return 1; }
		when('IPSO') { return 1; }
		when('GAIA') { return 1; }
		when('EDGE') { return 1; }
		default {
	   		$logger->error("The CheckPoint OS entered (".$checkpoint_os.") isn't valid (SPLAT/IPSO/GAIA/EDGE)");
	   		return 0;
	   	}
	}
}

# Function who verify the CheckPoint Type
sub checkpoint_device_type {
	my $checkpoint_type = uc $_[0];
	given($checkpoint_type) {
	   when('SMARTCENTER') { return 1; }
	   when('FIREWALL') { return 1; }
	   when('EVENTIA-REPORTER') { return 1; }
	   default {
	   	$logger->error("The CheckPoint Type entered (".$checkpoint_type.") isn't valid (SMARTCENTER/FIREWALL/EVENTIA-REPORTER)");
	   	return 0;
	   }
	}
}

## Function who generate a XML configuration file
sub generate {
	$logger->debug("[".$GenConfigFile."] Generating configuration file ") if $verbose;
	# Question function :
	#	ARG1 : Question
	# 	ARG2 : Default Reply
	#	ARG3 : Reply is mandatory ? (1 => YES / 0 = NO)
	#	ARG4 : Function to verify the reply conformity
	my $device_ip_address = &questions("Please enter the Device IP to backup", "", "1", "verify_ip");
	my $device_description = &questions("Please enter the description of the device", "", "1", "");
	my $operating_system = &questions("Please specify the OS (leave empty to use the default os)", "GAIA", "1", "main::checkpoint_operating_system" );
	my $type = &questions("Please specify the type (leave empty to use the default)", "FIREWALL", "1", "main::checkpoint_device_type" );
	my $username = "";
	my $password = "";
	my $certificate = "";
	my $webui_port = "";
	given ($operating_system) {
	   when('EDGE') {
	   	$username = &questions("Please enter the device username (leave empty to use the default username)", "admin", "0", "");
	   	$password = &questions("Please enter the WebUi password", "", "1", "");
	   	$webui_port = &questions("Please enter the WebUi port", "981", "1", "");
	   }
	   default {
	   	$username = &questions("Please enter the device username (leave empty to use the default username)", "backup", "1", "");
	   	$certificate = &questions("Please enter the SSH certificate (leave empty to use the default certificate)", "", "0", "" );
	   }
	}
	my $store_folder = &questions("Please specify the folder who store the backup", "", "1", "verify_folder");
	my $file_prefix = &questions("Please enter the backup file prefix (date automaticly add)", "", "1", "");
	my $retention = &questions("Please enter configuration retention in number of save backup (leave empty to use the default retention : ".$default_retention.")", "", "0", "verify_retention");
	my $timeout_scp = &questions("Please enter SCP Timeout in seconds (leave empty to use the default retention : ".$default_scp_timeout.")", "", "0", "verify_timeout");
	my %XML = (
		'enable' => '1',
		'module' => $program,
		'date' => $date,
		'ip' => $device_ip_address,
		'description' => $device_description,
		'operating-system' => $operating_system,
		'type' => $type,
		'username' => $username,
		'password' => $password,
		'certificate' => $certificate,
		'webui-port' => $webui_port,
		'store-folder' => $store_folder,
		'file-prefix' => $file_prefix,
		'retention' => $retention,
		'timeout-scp' => $timeout_scp,
		); ## To Update with all information need
	my $Config = new XML::Simple (NoAttr=>1, NoSort => 1, KeepRoot => 1);
	my $Config_data = $Config->XMLout({config=>\%XML}, outputfile=>$GenConfigFile, NoAttr=>1);
	$logger->info("[".$GenConfigFile."] Configuration generation finish... ");
}

## Function who backup device
sub backup {
	$logger->debug("[".$ConfigFile."] Starting backuping configuration ") if $verbose;
	my $configuration_filename;
	my $configuration_filename_checkpoint;
	# Declare all configuration from the XML file
	my $config_parsing = &parse_config($ConfigFile);
	my $device_ip_address = $config_parsing->{'ip'};
	my $operating_system = $config_parsing->{'operating-system'};
	my $type = $config_parsing->{'type'};
	my $username = $config_parsing->{'username'};
	my $webui_port = $config_parsing->{'webui-port'};
	my $password = $config_parsing->{'password'};
	my $certificate = $config_parsing->{'certificate'};
	my $store_folder = $config_parsing->{'store-folder'};
	my $file_prefix = $config_parsing->{'file-prefix'};
	my $retention = $config_parsing->{'retention'};
	my $timeout_scp = $config_parsing->{'timeout-scp'};
	# Test if $retention is empty. If empty, use $default_retention
	$retention = $default_retention if ( $retention eq "" );
	# Test if $timeout_scp is empty. If empty, use $default_scp_timeout
	$timeout_scp = $default_scp_timeout if ( $timeout_scp eq "" );
	# Recuperation de la configuration précédente
	my $newest_configuration = &newest_file($store_folder, "^".$file_prefix."_.*");
	given($operating_system) {
		when('EDGE') {
			$configuration_filename = $store_folder."/".$file_prefix."_".$date.".conf";
		}
		when('IPSO') {
			$ENV{TERM} = 'vt220';
			$configuration_filename = $store_folder."/".$file_prefix."_".$date.".tgz";
		}
		when('GAIA') {
			$configuration_filename = $store_folder."/".$file_prefix."_".$date."_GAIA.conf";
		}
		default {
			$configuration_filename = $store_folder."/".$file_prefix."_".$date.".tgz";
		}
	}
	# Backup
	given($operating_system) {
		when('EDGE') {
			my $mech = WWW::Mechanize->new(
				agent => 'Backup NSOC NIS' ,
				autocheck => 0,
				ssl_opts => { verify_hostname => 0 }
			);
			my $url = "https://".$device_ip_address.":".$webui_port."/console?cmd=export";
			$mech->credentials( $username => $password );
			$mech->get( $url );
			if ( $mech->success ) {
				# On recupere le contenu de la configuration
				my @configuration = $mech->content();
				# Recuperation de la configuration précédente
				my $newest_configuration = &newest_file($store_folder, "^".$file_prefix."_.*");
				# Ecriture de la configuration actuelle
				open(CONFIG, '>>'.$configuration_filename);
				print CONFIG @configuration;
				close(CONFIG);
				if (defined($newest_configuration)) {
					# Diff de configuration
					if (&diff_file($ConfigFile, $newest_configuration, $configuration_filename)) {
						# La configuration existante et la configuration actuelle sont différentes
						$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") and last saved configuration (".$newest_configuration.") are different");
						$logger->info("[".$ConfigFile."] Configuration (".$configuration_filename.") is conserved");
						} else {
							# La configuration existante et la configuration actuelle sont identiques
							$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") and last saved configuration (".$newest_configuration.") are the same");
							$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") will be deleted");
							if ( -f $configuration_filename) {
								unlink($configuration_filename) or &return_code(50, "Failed to delete the configuration file (".$configuration_filename.") identical to ".$newest_configuration);
							}
						}
				} else {
					$logger->info("[".$ConfigFile."] No precedent configuration. Backup the actual configuration");
				}
			} else {
				&return_code(50, "[".$ConfigFile."] Failed to get url (".$url."). Return HTTP code : ".$mech->status()." with message ".$mech->response->status_line);
			}
		}
		when('IPSO') {
			$Net::OpenSSH::debug = -1 if $verbose;
			my $ssh;
			if ( $certificate ) {
				$ssh = Net::OpenSSH->new($device_ip_address,
					user		=> $username,
					key_path	=> $certificate,
					kill_ssh_on_timeout => 1,
					timeout		=> 600,
					master_opts => [-o => "StrictHostKeyChecking=no"],
				);
			} else {
				$ssh = Net::OpenSSH->new($device_ip_address,
					user		=> $username,
					kill_ssh_on_timeout => 1,
					timeout		=> 600,
					master_opts => [-o => "StrictHostKeyChecking=no"],
				);
			}
			$ssh->error and $logger->fatal("[".$ConfigFile."] Couldn't establish SSH connection: ". $ssh->error);
			my $stderr = 1;
			$stderr = 0 if $verbose;
			my $backupdate = strftime("%Y%m%d", localtime);
			$ssh->system({ stderr_discard => $stderr }, 'clish', '-c', \'set backup manual filename nokia');
				$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
			$ssh->system({ stderr_discard => $stderr }, 'clish', '-c', \'set backup manual homedirs on');
				$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
			$ssh->system({ stderr_discard => $stderr }, 'clish', '-c', \'set backup manual logfiles off');
				$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
			$ssh->system({ stderr_discard => $stderr, tty => 1 }, 'clish', '-c', \'set backup manual on');
				$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
			# SCP download
			$ssh->scp_get('/var/backup/nokia_'.$backupdate.'.tgz', $configuration_filename);
				$ssh->error and &return_code(50, "SCP Configuration failed : " . $ssh->error);
			# Delete backup on device
			$ssh->system({ stderr_discard => $stderr }, "rm /var/backup/nokia_".$backupdate.".tgz");
				$ssh->error and &return_code(50, "Backup remove failed : " . $ssh->error);
		}
		# If Gaia or SPLAT
		default {
			# Start SSH connection
			$Net::OpenSSH::debug = -1 if $verbose;
			my $ssh;
			if ( $certificate ) {
				$ssh = Net::OpenSSH->new($device_ip_address,
					user		=> $username,
					key_path	=> $certificate,
					kill_ssh_on_timeout => 1,
					timeout		=> 120,
					master_opts => [-o => "StrictHostKeyChecking=no"],
				);
			} else {
				$ssh = Net::OpenSSH->new($device_ip_address,
					user		=> $username,
					kill_ssh_on_timeout => 1,
					timeout		=> 120,
					master_opts => [-o => "StrictHostKeyChecking=no"],
				);
			}
			$ssh->error and $logger->fatal("[".$ConfigFile."] Couldn't establish SSH connection: ". $ssh->error);
			# Generate backup
			my $stderr = 1;
			$stderr = 0 if $verbose;
			# Device type ?
			my $local_filename_system;
			my $local_filename_checkpoint;
			given($operating_system) {
				when('GAIA') {
					# Backup GAIA configuration
					$local_filename_system = "~/gaia.config";
					$ssh->system({ stderr_discard => $stderr, timeout => 500 }, "rm -f ~/gaia.config && clish -c 'save configuration gaia.config'");
						$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
				}
				when('SPLAT') {
					$local_filename_system = "/var/log/system_".$date."-config.tgz";
					# Backup SPLAT configuration
					my $output = $ssh->capture({ stderr_discard => $stderr, timeout => 500 }, "source /etc/profile && cpbackup_util backup --file /var/log/system_".$date."-config.tgz --type all");
					if ($output =~ /You should disconnect all GUI Clients from this SmartCenter/) {
                        $ssh->error and &return_code(50, "Backup configuration failed : You should disconnect all GUI Clients from this SmartCenter");
                    }
                    	$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
				}
			}
			given($type) {
				when('SMARTCENTER') {
					# Verify if SmartCenter type (Primary => 1 / Secondary => 0)
					my $smartcenter_type = $ssh->capture("source /etc/profile && cpprod_util FwIsPrimary");
					# remove newline on return
					chomp($smartcenter_type);
					# Remove whitespace in end of return
					$smartcenter_type =~ s/\s*$//g;
					$logger->debug("SmartCenter Type: ".$smartcenter_type);
					# If Smartcenter is Primary
					if ($smartcenter_type eq 1) {
						$local_filename_checkpoint = "/var/log/migrate-export_".$date."-config.tgz";
						$configuration_filename_checkpoint = $store_folder."/".$file_prefix."_".$date."_SMARTCENTER.tgz";
						# Make upgrade export
						my $FWDIR = $ssh->capture("source /etc/profile && env | egrep '^FWDIR='");
						$FWDIR =~ m/FWDIR=(\X+)\n/;
						$FWDIR = $1;
						my ($output, $errput) = $ssh->system({ stderr_discard => $stderr, timeout => 600 }, "source /etc/profile && ".$FWDIR."/bin/upgrade_tools/migrate export -n /var/log/migrate-export_".$date."-config");
							$ssh->error and &return_code(50, "Backup configuration failed : " . $ssh->error);
                        print "TEST == ".$output;
					# If SmartCenter is Secondary
					} else {
						$logger->debug("SmartCenter is Secondary. Don't backup with 'upgrade_export'");
					}
				}
				when('EVENTIA-REPORTER') {
					$local_filename_checkpoint =  "/var/log/evs-backup_".$date."-config.tgz";
					$configuration_filename_checkpoint = $store_folder."/".$file_prefix."_".$date."_EVENTIA.tgz";
					# EVS Backup
					my $RTDIR = $ssh->capture("source /etc/profile && env | egrep '^RTDIR='");
					$RTDIR =~ m/RTDIR=(\X+)\n/;
					$RTDIR = $1;
					$ssh->system({ stderr_discard => $stderr, timeout => 900, async => 1 }, "source /etc/profile && ".$RTDIR."/bin/evs_backup -filename /var/log/evs-backup_".$date."-config.tgz -LogoAndScripts -export -Results -Logs");
						$ssh->error and &return_code(50, "Evs_backup failed : " . $ssh->error);
					## Pour corriger le bug. Le script au dessus ne rend jamais la main.
					sleep 100;
				}
			}

			# SCP download
			if (defined($local_filename_system)) {
				$ssh->scp_get({ glob => 1, timeout => $timeout_scp }, $local_filename_system, $configuration_filename);
					$ssh->error and &cleanup($configuration_filename) and &return_code(50, "SCP Backup Configuration failed : " . $ssh->error);
				# Delete backup on device
				$ssh->system({ stderr_discard => $stderr }, "rm -f ".$local_filename_system);
					$ssh->error and &return_code(50, "Backup remove failed : " . $ssh->error);
				# Change file right
				chmod(0644,$configuration_filename) || $logger->warn("[".$ConfigFile."] Change file right to 0644");
			}
			# SCP download
			if (defined($local_filename_checkpoint)) {
				$ssh->scp_get({ glob => 1, timeout => $timeout_scp }, $local_filename_checkpoint, $configuration_filename_checkpoint);
					$ssh->error and &cleanup($configuration_filename) and &return_code(50, "SCP Backup Configuration failed : " . $ssh->error);
				# Delete backup on device
				$ssh->system({ stderr_discard => $stderr }, "rm -f ".$local_filename_checkpoint);
					$ssh->error and &return_code(50, "Backup remove failed : " . $ssh->error);
				# Change file right
				chmod(0644,$configuration_filename_checkpoint) || $logger->warn("[".$ConfigFile."] Change file right to 0644");
			}
		}
	}
	# Conservation uniquement si différent de la version précédente
	if (defined($newest_configuration)) {
		# Diff de configuration
		if (&diff_file($ConfigFile, $newest_configuration, $configuration_filename)) {
			# La configuration existante et la configuration actuelle sont différentes
			$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") and last saved configuration (".$newest_configuration.") are different");
			$logger->info("[".$ConfigFile."] Configuration (".$configuration_filename.") is conserved");
		} else {
			# La configuration existante et la configuration actuelle sont identiques
			$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") and last saved configuration (".$newest_configuration.") are the same");
			$logger->info("[".$ConfigFile."] Actual configuration (".$configuration_filename.") will be deleted");
			if ( -f $configuration_filename) {
				unlink($configuration_filename) or &return_code(50, "Failed to delete the configuration file (".$configuration_filename.") identical to ".$newest_configuration);
			}
		}
	} else {
			$logger->info("[".$ConfigFile."] No precedent configuration. Backup the actual configuration");
	}
	# Purge old backup
	&purge_files($retention, $store_folder, "^".$file_prefix."_.*");
}

##########
# Script #
##########

# Check If arguments are present
if ( @ARGV > 0 ) {
	# Parse Arguments
	GetOptions(
		"d|description" => \&description,
		"c|config=s" => \$ConfigFile,
		"g|generate=s" => \$GenConfigFile,
		"v|verbose" => \$verbose,
		"q|quiet" => sub { $verbose = 0 },
		"man" => \$show_man,
		"h|help|?" => \$show_help
	)
	# Show usage if no argument match
	or pod2usage({-message => "Argument unknown\n", -exitval => 1});
} else {
	# Show usage if no argument specified
	pod2usage({-message => "No argument specify\n", -exitval => 2});
}

# Show help usage
pod2usage(1) if $show_help;
# Show man usage
pod2usage(-verbose => 2) if $show_man;

# Call functions
&generate($GenConfigFile) if $GenConfigFile;
&backup($ConfigFile) if $ConfigFile;


__END__

=head1 NAME

ABTM - Another Backup Tool Module

=head1 AUTHOR

Script written by Marc GUYARD for Orange AIS <m.guyard@orange.com>.

=head1 VERSION

0.1 BETA PERL

=head1 SYNOPSIS

	Options:
		--description
			show the module description
		--config <configuration_file>
			use a configuration file specified
		--generate <configuration_file>
			generate a configuration file specified
		--verbose
			active script verbose
		--quiet
			active script quiet mode
		--man
			full documentation
		--help
			brief help message

=head1 OPTIONS

=over 8

=item B<--description>

Show the module description

=item B<--config>

Backup using a configuration file specify in argument.

=item B<--generate>

Generate a configuration file with the path and the name specify in argument.

=item B<--verbose>

Activate verbose mode. Should be used with another argument.

=item B<--quiet>

Activate quiet mode. Should be used with another argument.

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> is a module of ABT (Another Backup Tool).

=head1 RETURN CODE

	Return Code :


=cut